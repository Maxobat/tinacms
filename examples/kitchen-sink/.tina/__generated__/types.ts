//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  page: Page;
  pageConnection: PageConnection;
  post: Post;
  postConnection: PostConnection;
  ssgPost: SsgPost;
  ssgPostConnection: SsgPostConnection;
  author: Author;
  authorConnection: AuthorConnection;
  documentation: Documentation;
  documentationConnection: DocumentationConnection;
  tag: Tag;
  tagConnection: TagConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PostFilter>;
};


export type QuerySsgPostArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QuerySsgPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<SsgPostFilter>;
};


export type QueryAuthorArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryAuthorConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<AuthorFilter>;
};


export type QueryDocumentationArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentationConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentationFilter>;
};


export type QueryTagArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryTagConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<TagFilter>;
};

export type DocumentFilter = {
  page?: InputMaybe<PageFilter>;
  post?: InputMaybe<PostFilter>;
  ssgPost?: InputMaybe<SsgPostFilter>;
  author?: InputMaybe<AuthorFilter>;
  documentation?: InputMaybe<DocumentationFilter>;
  tag?: InputMaybe<TagFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = PageShowcase | PageBlockPage | Post | SsgPost | Author | Documentation | Tag;

export type PageShowcaseItems = {
  __typename?: 'PageShowcaseItems';
  title: Scalars['String'];
  description?: Maybe<Scalars['JSON']>;
  image?: Maybe<Scalars['String']>;
};

export type PageShowcase = Node & Document & {
  __typename?: 'PageShowcase';
  title: Scalars['String'];
  items?: Maybe<Array<Maybe<PageShowcaseItems>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type PageBlockPageBlocksHeroActions = {
  __typename?: 'PageBlockPageBlocksHeroActions';
  label?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  variant?: Maybe<Scalars['String']>;
};

export type PageBlockPageBlocksHero = {
  __typename?: 'PageBlockPageBlocksHero';
  headline?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  actions?: Maybe<Array<Maybe<PageBlockPageBlocksHeroActions>>>;
};

export type PageBlockPageBlocksFeatures = {
  __typename?: 'PageBlockPageBlocksFeatures';
  title?: Maybe<Scalars['String']>;
  imageList?: Maybe<Array<Maybe<Scalars['String']>>>;
  hidden?: Maybe<Scalars['String']>;
  booleanLabels?: Maybe<Scalars['Boolean']>;
  boolean?: Maybe<Scalars['Boolean']>;
  checkbox?: Maybe<Array<Maybe<Scalars['String']>>>;
  checkboxInline?: Maybe<Array<Maybe<Scalars['String']>>>;
  categoriesOther?: Maybe<Array<Maybe<Scalars['String']>>>;
  radioGroup?: Maybe<Scalars['String']>;
  radioGroupInline?: Maybe<Scalars['String']>;
  buttonToggle?: Maybe<Scalars['String']>;
  buttonToggleIcon?: Maybe<Scalars['String']>;
  buttonToggleVertical?: Maybe<Scalars['String']>;
  select?: Maybe<Scalars['String']>;
  items?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PageBlockPageBlocksCtaActions = {
  __typename?: 'PageBlockPageBlocksCtaActions';
  label?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  variant?: Maybe<Scalars['String']>;
};

export type PageBlockPageBlocksCta = {
  __typename?: 'PageBlockPageBlocksCta';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  actions?: Maybe<Array<Maybe<PageBlockPageBlocksCtaActions>>>;
};

export type PageBlockPageBlocks = PageBlockPageBlocksHero | PageBlockPageBlocksFeatures | PageBlockPageBlocksCta;

export type PageBlockPage = Node & Document & {
  __typename?: 'PageBlockPage';
  title: Scalars['String'];
  blocks?: Maybe<Array<Maybe<PageBlockPageBlocks>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type Page = PageShowcase | PageBlockPage;

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type PageShowcaseItemsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type PageShowcaseFilter = {
  title?: InputMaybe<StringFilter>;
  items?: InputMaybe<PageShowcaseItemsFilter>;
};

export type PageBlockPageBlocksHeroActionsFilter = {
  label?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  variant?: InputMaybe<StringFilter>;
};

export type PageBlockPageBlocksHeroFilter = {
  headline?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  actions?: InputMaybe<PageBlockPageBlocksHeroActionsFilter>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type PageBlockPageBlocksFeaturesFilter = {
  title?: InputMaybe<StringFilter>;
  imageList?: InputMaybe<ImageFilter>;
  hidden?: InputMaybe<StringFilter>;
  booleanLabels?: InputMaybe<BooleanFilter>;
  boolean?: InputMaybe<BooleanFilter>;
  checkbox?: InputMaybe<StringFilter>;
  checkboxInline?: InputMaybe<StringFilter>;
  categoriesOther?: InputMaybe<StringFilter>;
  radioGroup?: InputMaybe<StringFilter>;
  radioGroupInline?: InputMaybe<StringFilter>;
  buttonToggle?: InputMaybe<StringFilter>;
  buttonToggleIcon?: InputMaybe<StringFilter>;
  buttonToggleVertical?: InputMaybe<StringFilter>;
  select?: InputMaybe<StringFilter>;
  items?: InputMaybe<StringFilter>;
};

export type PageBlockPageBlocksCtaActionsFilter = {
  label?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  variant?: InputMaybe<StringFilter>;
};

export type PageBlockPageBlocksCtaFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  actions?: InputMaybe<PageBlockPageBlocksCtaActionsFilter>;
};

export type PageBlockPageBlocksFilter = {
  hero?: InputMaybe<PageBlockPageBlocksHeroFilter>;
  features?: InputMaybe<PageBlockPageBlocksFeaturesFilter>;
  cta?: InputMaybe<PageBlockPageBlocksCtaFilter>;
};

export type PageBlockPageFilter = {
  title?: InputMaybe<StringFilter>;
  blocks?: InputMaybe<PageBlockPageBlocksFilter>;
};

export type PageFilter = {
  showcase?: InputMaybe<PageShowcaseFilter>;
  blockPage?: InputMaybe<PageBlockPageFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type PostAuthor = Author;

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String'];
  author?: Maybe<PostAuthor>;
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  body?: Maybe<Scalars['JSON']>;
  image?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type PostAuthorFilter = {
  author?: InputMaybe<AuthorFilter>;
};

export type PostBodyRimgFilter = {
  src?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
  breakout?: InputMaybe<StringFilter>;
  width?: InputMaybe<StringFilter>;
  height?: InputMaybe<StringFilter>;
  caption?: InputMaybe<StringFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type PostBodyAdPanelFilter = {
  _value?: InputMaybe<StringFilter>;
};

export type PostBodyFeaturePanelFilter = {
  _value?: InputMaybe<StringFilter>;
};

export type PostBodyPullQuoteFilter = {
  foo?: InputMaybe<StringFilter>;
  children?: InputMaybe<RichTextFilter>;
};

export type PostBodyHeroFilter = {
  header?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type PostBodyFilter = {
  rimg?: InputMaybe<PostBodyRimgFilter>;
  adPanel?: InputMaybe<PostBodyAdPanelFilter>;
  featurePanel?: InputMaybe<PostBodyFeaturePanelFilter>;
  pullQuote?: InputMaybe<PostBodyPullQuoteFilter>;
  Hero?: InputMaybe<PostBodyHeroFilter>;
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  author?: InputMaybe<PostAuthorFilter>;
  categories?: InputMaybe<StringFilter>;
  body?: InputMaybe<PostBodyFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type SsgPost = Node & Document & {
  __typename?: 'SsgPost';
  title: Scalars['String'];
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type SsgPostBodyRimgFilter = {
  src?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
  breakout?: InputMaybe<StringFilter>;
  width?: InputMaybe<StringFilter>;
  height?: InputMaybe<StringFilter>;
  caption?: InputMaybe<StringFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type SsgPostBodyAdPanelFilter = {
  _value?: InputMaybe<StringFilter>;
};

export type SsgPostBodyFeaturePanelFilter = {
  _value?: InputMaybe<StringFilter>;
};

export type SsgPostBodyCenterFilter = {
  children?: InputMaybe<RichTextFilter>;
};

export type SsgPostBodyPullQuoteFilter = {
  foo?: InputMaybe<StringFilter>;
  children?: InputMaybe<RichTextFilter>;
};

export type SsgPostBodyHeroFilter = {
  header?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type SsgPostBodyFilter = {
  rimg?: InputMaybe<SsgPostBodyRimgFilter>;
  adPanel?: InputMaybe<SsgPostBodyAdPanelFilter>;
  featurePanel?: InputMaybe<SsgPostBodyFeaturePanelFilter>;
  center?: InputMaybe<SsgPostBodyCenterFilter>;
  pullQuote?: InputMaybe<SsgPostBodyPullQuoteFilter>;
  Hero?: InputMaybe<SsgPostBodyHeroFilter>;
};

export type SsgPostFilter = {
  title?: InputMaybe<StringFilter>;
  body?: InputMaybe<SsgPostBodyFilter>;
};

export type SsgPostConnectionEdges = {
  __typename?: 'SsgPostConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<SsgPost>;
};

export type SsgPostConnection = Connection & {
  __typename?: 'SsgPostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<SsgPostConnectionEdges>>>;
};

export type Author = Node & Document & {
  __typename?: 'Author';
  name?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['JSON']>;
  hobbies?: Maybe<Array<Maybe<Scalars['String']>>>;
  image?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type AuthorFilter = {
  name?: InputMaybe<StringFilter>;
  bio?: InputMaybe<RichTextFilter>;
  hobbies?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type AuthorConnectionEdges = {
  __typename?: 'AuthorConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Author>;
};

export type AuthorConnection = Connection & {
  __typename?: 'AuthorConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<AuthorConnectionEdges>>>;
};

export type DocumentationTagsReference = Tag;

export type DocumentationTags = {
  __typename?: 'DocumentationTags';
  reference?: Maybe<DocumentationTagsReference>;
};

export type Documentation = Node & Document & {
  __typename?: 'Documentation';
  title: Scalars['String'];
  tags?: Maybe<Array<Maybe<DocumentationTags>>>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type DocumentationTagsReferenceFilter = {
  tag?: InputMaybe<TagFilter>;
};

export type DocumentationTagsFilter = {
  reference?: InputMaybe<DocumentationTagsReferenceFilter>;
};

export type DocumentationFilter = {
  title?: InputMaybe<StringFilter>;
  tags?: InputMaybe<DocumentationTagsFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type DocumentationConnectionEdges = {
  __typename?: 'DocumentationConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Documentation>;
};

export type DocumentationConnection = Connection & {
  __typename?: 'DocumentationConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentationConnectionEdges>>>;
};

export type Tag = Node & Document & {
  __typename?: 'Tag';
  title: Scalars['String'];
  description?: Maybe<Scalars['JSON']>;
  testing?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type TagFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  testing?: InputMaybe<StringFilter>;
};

export type TagConnectionEdges = {
  __typename?: 'TagConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Tag>;
};

export type TagConnection = Connection & {
  __typename?: 'TagConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<TagConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updatePage: Page;
  createPage: Page;
  updatePost: Post;
  createPost: Post;
  updateSsgPost: SsgPost;
  createSsgPost: SsgPost;
  updateAuthor: Author;
  createAuthor: Author;
  updateDocumentation: Documentation;
  createDocumentation: Documentation;
  updateTag: Tag;
  createTag: Tag;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String'];
  params: PostMutation;
};


export type MutationUpdateSsgPostArgs = {
  relativePath: Scalars['String'];
  params: SsgPostMutation;
};


export type MutationCreateSsgPostArgs = {
  relativePath: Scalars['String'];
  params: SsgPostMutation;
};


export type MutationUpdateAuthorArgs = {
  relativePath: Scalars['String'];
  params: AuthorMutation;
};


export type MutationCreateAuthorArgs = {
  relativePath: Scalars['String'];
  params: AuthorMutation;
};


export type MutationUpdateDocumentationArgs = {
  relativePath: Scalars['String'];
  params: DocumentationMutation;
};


export type MutationCreateDocumentationArgs = {
  relativePath: Scalars['String'];
  params: DocumentationMutation;
};


export type MutationUpdateTagArgs = {
  relativePath: Scalars['String'];
  params: TagMutation;
};


export type MutationCreateTagArgs = {
  relativePath: Scalars['String'];
  params: TagMutation;
};

export type DocumentUpdateMutation = {
  page?: InputMaybe<PageMutation>;
  post?: InputMaybe<PostMutation>;
  ssgPost?: InputMaybe<SsgPostMutation>;
  author?: InputMaybe<AuthorMutation>;
  documentation?: InputMaybe<DocumentationMutation>;
  tag?: InputMaybe<TagMutation>;
  relativePath?: InputMaybe<Scalars['String']>;
};

export type DocumentMutation = {
  page?: InputMaybe<PageMutation>;
  post?: InputMaybe<PostMutation>;
  ssgPost?: InputMaybe<SsgPostMutation>;
  author?: InputMaybe<AuthorMutation>;
  documentation?: InputMaybe<DocumentationMutation>;
  tag?: InputMaybe<TagMutation>;
};

export type PageShowcaseItemsMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['JSON']>;
  image?: InputMaybe<Scalars['String']>;
};

export type PageShowcaseMutation = {
  title?: InputMaybe<Scalars['String']>;
  items?: InputMaybe<Array<InputMaybe<PageShowcaseItemsMutation>>>;
};

export type PageBlockPageBlocksHeroActionsMutation = {
  label?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<Scalars['String']>;
};

export type PageBlockPageBlocksHeroMutation = {
  headline?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  actions?: InputMaybe<Array<InputMaybe<PageBlockPageBlocksHeroActionsMutation>>>;
};

export type PageBlockPageBlocksFeaturesMutation = {
  title?: InputMaybe<Scalars['String']>;
  imageList?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  hidden?: InputMaybe<Scalars['String']>;
  booleanLabels?: InputMaybe<Scalars['Boolean']>;
  boolean?: InputMaybe<Scalars['Boolean']>;
  checkbox?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  checkboxInline?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  categoriesOther?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  radioGroup?: InputMaybe<Scalars['String']>;
  radioGroupInline?: InputMaybe<Scalars['String']>;
  buttonToggle?: InputMaybe<Scalars['String']>;
  buttonToggleIcon?: InputMaybe<Scalars['String']>;
  buttonToggleVertical?: InputMaybe<Scalars['String']>;
  select?: InputMaybe<Scalars['String']>;
  items?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type PageBlockPageBlocksCtaActionsMutation = {
  label?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<Scalars['String']>;
};

export type PageBlockPageBlocksCtaMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  actions?: InputMaybe<Array<InputMaybe<PageBlockPageBlocksCtaActionsMutation>>>;
};

export type PageBlockPageBlocksMutation = {
  hero?: InputMaybe<PageBlockPageBlocksHeroMutation>;
  features?: InputMaybe<PageBlockPageBlocksFeaturesMutation>;
  cta?: InputMaybe<PageBlockPageBlocksCtaMutation>;
};

export type PageBlockPageMutation = {
  title?: InputMaybe<Scalars['String']>;
  blocks?: InputMaybe<Array<InputMaybe<PageBlockPageBlocksMutation>>>;
};

export type PageMutation = {
  showcase?: InputMaybe<PageShowcaseMutation>;
  blockPage?: InputMaybe<PageBlockPageMutation>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  categories?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  body?: InputMaybe<Scalars['JSON']>;
  image?: InputMaybe<Scalars['String']>;
};

export type SsgPostMutation = {
  title?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type AuthorMutation = {
  name?: InputMaybe<Scalars['String']>;
  bio?: InputMaybe<Scalars['JSON']>;
  hobbies?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  image?: InputMaybe<Scalars['String']>;
};

export type DocumentationTagsMutation = {
  reference?: InputMaybe<Scalars['String']>;
};

export type DocumentationMutation = {
  title?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<InputMaybe<DocumentationTagsMutation>>>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type TagMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['JSON']>;
  testing?: InputMaybe<Scalars['String']>;
};

export type DocumentQueryQueryVariables = Exact<{
  collection: Scalars['String'];
  relativePath: Scalars['String'];
}>;


export type DocumentQueryQuery = { __typename?: 'Query', document: { __typename?: 'PageShowcase', title: string, items?: Array<{ __typename: 'PageShowcaseItems', title: string, description?: any | null, image?: string | null } | null> | null } | { __typename?: 'PageBlockPage', title: string, blocks?: Array<{ __typename: 'PageBlockPageBlocksHero', headline?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlockPageBlocksHeroActions', label?: string | null, url?: string | null, variant?: string | null } | null> | null } | { __typename: 'PageBlockPageBlocksFeatures', title?: string | null, imageList?: Array<string | null> | null, hidden?: string | null, booleanLabels?: boolean | null, boolean?: boolean | null, checkbox?: Array<string | null> | null, checkboxInline?: Array<string | null> | null, categoriesOther?: Array<string | null> | null, radioGroup?: string | null, radioGroupInline?: string | null, buttonToggle?: string | null, buttonToggleIcon?: string | null, buttonToggleVertical?: string | null, select?: string | null, items?: Array<string | null> | null } | { __typename: 'PageBlockPageBlocksCta', title?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlockPageBlocksCtaActions', label?: string | null, url?: string | null, variant?: string | null } | null> | null } | null> | null } | { __typename?: 'Post', title: string, categories?: Array<string | null> | null, body?: any | null, image?: string | null, author?: { __typename?: 'Author', name?: string | null, bio?: any | null, hobbies?: Array<string | null> | null, image?: string | null, id: string } | null } | { __typename?: 'SsgPost', title: string, body?: any | null } | { __typename?: 'Author', name?: string | null, bio?: any | null, hobbies?: Array<string | null> | null, image?: string | null } | { __typename?: 'Documentation', title: string, body?: any | null, tags?: Array<{ __typename: 'DocumentationTags', reference?: { __typename?: 'Tag', title: string, description?: any | null, testing?: string | null, id: string } | null } | null> | null } | { __typename?: 'Tag' } };

export type CollectionQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type CollectionQueryQuery = { __typename?: 'Query', collections: Array<{ __typename?: 'Collection', name: string, format?: string | null }> };

export type NodeQueryQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type NodeQueryQuery = { __typename?: 'Query', node: { __typename?: 'PageShowcase', title: string, items?: Array<{ __typename: 'PageShowcaseItems', title: string, description?: any | null, image?: string | null } | null> | null } | { __typename?: 'PageBlockPage', title: string, blocks?: Array<{ __typename: 'PageBlockPageBlocksHero', headline?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlockPageBlocksHeroActions', label?: string | null, url?: string | null, variant?: string | null } | null> | null } | { __typename: 'PageBlockPageBlocksFeatures', title?: string | null, imageList?: Array<string | null> | null, hidden?: string | null, booleanLabels?: boolean | null, boolean?: boolean | null, checkbox?: Array<string | null> | null, checkboxInline?: Array<string | null> | null, categoriesOther?: Array<string | null> | null, radioGroup?: string | null, radioGroupInline?: string | null, buttonToggle?: string | null, buttonToggleIcon?: string | null, buttonToggleVertical?: string | null, select?: string | null, items?: Array<string | null> | null } | { __typename: 'PageBlockPageBlocksCta', title?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlockPageBlocksCtaActions', label?: string | null, url?: string | null, variant?: string | null } | null> | null } | null> | null } | { __typename?: 'Post', title: string, categories?: Array<string | null> | null, body?: any | null, image?: string | null, author?: { __typename?: 'Author', name?: string | null, bio?: any | null, hobbies?: Array<string | null> | null, image?: string | null, id: string } | null } | { __typename?: 'SsgPost', title: string, body?: any | null } | { __typename?: 'Author', name?: string | null, bio?: any | null, hobbies?: Array<string | null> | null, image?: string | null } | { __typename?: 'Documentation', title: string, body?: any | null, tags?: Array<{ __typename: 'DocumentationTags', reference?: { __typename?: 'Tag', title: string, description?: any | null, testing?: string | null, id: string } | null } | null> | null } | { __typename?: 'Tag' } };

export type MenuQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type MenuQueryQuery = { __typename?: 'Query', collections: Array<{ __typename?: 'Collection', label?: string | null, name: string, documents: { __typename?: 'DocumentConnection', edges?: Array<{ __typename?: 'DocumentConnectionEdges', node?: { __typename?: 'PageShowcase', _sys: { __typename?: 'SystemInfo', path: string, filename: string } } | { __typename?: 'PageBlockPage', _sys: { __typename?: 'SystemInfo', path: string, filename: string } } | { __typename?: 'Post', _sys: { __typename?: 'SystemInfo', path: string, filename: string } } | { __typename?: 'SsgPost', _sys: { __typename?: 'SystemInfo', path: string, filename: string } } | { __typename?: 'Author', _sys: { __typename?: 'SystemInfo', path: string, filename: string } } | { __typename?: 'Documentation', _sys: { __typename?: 'SystemInfo', path: string, filename: string } } | { __typename?: 'Tag', _sys: { __typename?: 'SystemInfo', path: string, filename: string } } | null } | null> | null } }> };

type PageParts_PageShowcase_Fragment = { __typename?: 'PageShowcase', title: string, items?: Array<{ __typename: 'PageShowcaseItems', title: string, description?: any | null, image?: string | null } | null> | null };

type PageParts_PageBlockPage_Fragment = { __typename?: 'PageBlockPage', title: string, blocks?: Array<{ __typename: 'PageBlockPageBlocksHero', headline?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlockPageBlocksHeroActions', label?: string | null, url?: string | null, variant?: string | null } | null> | null } | { __typename: 'PageBlockPageBlocksFeatures', title?: string | null, imageList?: Array<string | null> | null, hidden?: string | null, booleanLabels?: boolean | null, boolean?: boolean | null, checkbox?: Array<string | null> | null, checkboxInline?: Array<string | null> | null, categoriesOther?: Array<string | null> | null, radioGroup?: string | null, radioGroupInline?: string | null, buttonToggle?: string | null, buttonToggleIcon?: string | null, buttonToggleVertical?: string | null, select?: string | null, items?: Array<string | null> | null } | { __typename: 'PageBlockPageBlocksCta', title?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlockPageBlocksCtaActions', label?: string | null, url?: string | null, variant?: string | null } | null> | null } | null> | null };

export type PagePartsFragment = PageParts_PageShowcase_Fragment | PageParts_PageBlockPage_Fragment;

export type PostPartsFragment = { __typename?: 'Post', title: string, categories?: Array<string | null> | null, body?: any | null, image?: string | null, author?: { __typename?: 'Author', name?: string | null, bio?: any | null, hobbies?: Array<string | null> | null, image?: string | null, id: string } | null };

export type SsgPostPartsFragment = { __typename?: 'SsgPost', title: string, body?: any | null };

export type AuthorPartsFragment = { __typename?: 'Author', name?: string | null, bio?: any | null, hobbies?: Array<string | null> | null, image?: string | null };

export type DocumentationPartsFragment = { __typename?: 'Documentation', title: string, body?: any | null, tags?: Array<{ __typename: 'DocumentationTags', reference?: { __typename?: 'Tag', title: string, description?: any | null, testing?: string | null, id: string } | null } | null> | null };

export type TagPartsFragment = { __typename?: 'Tag', title: string, description?: any | null, testing?: string | null };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename?: 'PageShowcase', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, items?: Array<{ __typename: 'PageShowcaseItems', title: string, description?: any | null, image?: string | null } | null> | null } | { __typename?: 'PageBlockPage', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'PageBlockPageBlocksHero', headline?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlockPageBlocksHeroActions', label?: string | null, url?: string | null, variant?: string | null } | null> | null } | { __typename: 'PageBlockPageBlocksFeatures', title?: string | null, imageList?: Array<string | null> | null, hidden?: string | null, booleanLabels?: boolean | null, boolean?: boolean | null, checkbox?: Array<string | null> | null, checkboxInline?: Array<string | null> | null, categoriesOther?: Array<string | null> | null, radioGroup?: string | null, radioGroupInline?: string | null, buttonToggle?: string | null, buttonToggleIcon?: string | null, buttonToggleVertical?: string | null, select?: string | null, items?: Array<string | null> | null } | { __typename: 'PageBlockPageBlocksCta', title?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlockPageBlocksCtaActions', label?: string | null, url?: string | null, variant?: string | null } | null> | null } | null> | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename?: 'PageShowcase', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, items?: Array<{ __typename: 'PageShowcaseItems', title: string, description?: any | null, image?: string | null } | null> | null } | { __typename?: 'PageBlockPage', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'PageBlockPageBlocksHero', headline?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlockPageBlocksHeroActions', label?: string | null, url?: string | null, variant?: string | null } | null> | null } | { __typename: 'PageBlockPageBlocksFeatures', title?: string | null, imageList?: Array<string | null> | null, hidden?: string | null, booleanLabels?: boolean | null, boolean?: boolean | null, checkbox?: Array<string | null> | null, checkboxInline?: Array<string | null> | null, categoriesOther?: Array<string | null> | null, radioGroup?: string | null, radioGroupInline?: string | null, buttonToggle?: string | null, buttonToggleIcon?: string | null, buttonToggleVertical?: string | null, select?: string | null, items?: Array<string | null> | null } | { __typename: 'PageBlockPageBlocksCta', title?: string | null, description?: string | null, actions?: Array<{ __typename: 'PageBlockPageBlocksCtaActions', label?: string | null, url?: string | null, variant?: string | null } | null> | null } | null> | null } | null } | null> | null } };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename?: 'Post', id: string, title: string, categories?: Array<string | null> | null, body?: any | null, image?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, author?: { __typename?: 'Author', name?: string | null, bio?: any | null, hobbies?: Array<string | null> | null, image?: string | null, id: string } | null } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename?: 'Post', id: string, title: string, categories?: Array<string | null> | null, body?: any | null, image?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, author?: { __typename?: 'Author', name?: string | null, bio?: any | null, hobbies?: Array<string | null> | null, image?: string | null, id: string } | null } | null } | null> | null } };

export type SsgPostQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type SsgPostQuery = { __typename?: 'Query', ssgPost: { __typename?: 'SsgPost', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type SsgPostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<SsgPostFilter>;
}>;


export type SsgPostConnectionQuery = { __typename?: 'Query', ssgPostConnection: { __typename?: 'SsgPostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SsgPostConnectionEdges', cursor: string, node?: { __typename?: 'SsgPost', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type AuthorQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type AuthorQuery = { __typename?: 'Query', author: { __typename?: 'Author', id: string, name?: string | null, bio?: any | null, hobbies?: Array<string | null> | null, image?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type AuthorConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<AuthorFilter>;
}>;


export type AuthorConnectionQuery = { __typename?: 'Query', authorConnection: { __typename?: 'AuthorConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AuthorConnectionEdges', cursor: string, node?: { __typename?: 'Author', id: string, name?: string | null, bio?: any | null, hobbies?: Array<string | null> | null, image?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type DocumentationQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type DocumentationQuery = { __typename?: 'Query', documentation: { __typename?: 'Documentation', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, tags?: Array<{ __typename: 'DocumentationTags', reference?: { __typename?: 'Tag', title: string, description?: any | null, testing?: string | null, id: string } | null } | null> | null } };

export type DocumentationConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentationFilter>;
}>;


export type DocumentationConnectionQuery = { __typename?: 'Query', documentationConnection: { __typename?: 'DocumentationConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'DocumentationConnectionEdges', cursor: string, node?: { __typename?: 'Documentation', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, tags?: Array<{ __typename: 'DocumentationTags', reference?: { __typename?: 'Tag', title: string, description?: any | null, testing?: string | null, id: string } | null } | null> | null } | null } | null> | null } };

export type TagQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type TagQuery = { __typename?: 'Query', tag: { __typename?: 'Tag', id: string, title: string, description?: any | null, testing?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type TagConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<TagFilter>;
}>;


export type TagConnectionQuery = { __typename?: 'Query', tagConnection: { __typename?: 'TagConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'TagConnectionEdges', cursor: string, node?: { __typename?: 'Tag', id: string, title: string, description?: any | null, testing?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  ... on PageShowcase {
    title
    items {
      __typename
      title
      description
      image
    }
  }
  ... on PageBlockPage {
    title
    blocks {
      __typename
      ... on PageBlockPageBlocksHero {
        headline
        description
        actions {
          __typename
          label
          url
          variant
        }
      }
      ... on PageBlockPageBlocksFeatures {
        title
        imageList
        hidden
        booleanLabels
        boolean
        checkbox
        checkboxInline
        categoriesOther
        radioGroup
        radioGroupInline
        buttonToggle
        buttonToggleIcon
        buttonToggleVertical
        select
        items
      }
      ... on PageBlockPageBlocksCta {
        title
        description
        actions {
          __typename
          label
          url
          variant
        }
      }
    }
  }
}
    `;
export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  title
  author {
    ... on Author {
      name
      bio
      hobbies
      image
    }
    ... on Document {
      id
    }
  }
  categories
  body
  image
}
    `;
export const SsgPostPartsFragmentDoc = gql`
    fragment SsgPostParts on SsgPost {
  title
  body
}
    `;
export const AuthorPartsFragmentDoc = gql`
    fragment AuthorParts on Author {
  name
  bio
  hobbies
  image
}
    `;
export const DocumentationPartsFragmentDoc = gql`
    fragment DocumentationParts on Documentation {
  title
  tags {
    __typename
    reference {
      ... on Tag {
        title
        description
        testing
      }
      ... on Document {
        id
      }
    }
  }
  body
}
    `;
export const TagPartsFragmentDoc = gql`
    fragment TagParts on Tag {
  title
  description
  testing
}
    `;
export const DocumentQueryDocument = gql`
    query DocumentQuery($collection: String!, $relativePath: String!) {
  document(collection: $collection, relativePath: $relativePath) {
    ...PageParts
    ...PostParts
    ...DocumentationParts
    ...AuthorParts
    ...SsgPostParts
  }
}
    ${PagePartsFragmentDoc}
${PostPartsFragmentDoc}
${DocumentationPartsFragmentDoc}
${AuthorPartsFragmentDoc}
${SsgPostPartsFragmentDoc}`;
export const CollectionQueryDocument = gql`
    query CollectionQuery {
  collections {
    name
    format
  }
}
    `;
export const NodeQueryDocument = gql`
    query NodeQuery($id: String!) {
  node(id: $id) {
    ... on Document {
      ...PageParts
      ...PostParts
      ...DocumentationParts
      ...AuthorParts
      ...SsgPostParts
    }
  }
}
    ${PagePartsFragmentDoc}
${PostPartsFragmentDoc}
${DocumentationPartsFragmentDoc}
${AuthorPartsFragmentDoc}
${SsgPostPartsFragmentDoc}`;
export const MenuQueryDocument = gql`
    query MenuQuery {
  collections {
    label
    name
    documents {
      edges {
        node {
          ... on Document {
            _sys {
              path
              filename
            }
          }
        }
      }
    }
  }
}
    `;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export const SsgPostDocument = gql`
    query ssgPost($relativePath: String!) {
  ssgPost(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SsgPostParts
  }
}
    ${SsgPostPartsFragmentDoc}`;
export const SsgPostConnectionDocument = gql`
    query ssgPostConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SsgPostFilter) {
  ssgPostConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SsgPostParts
      }
    }
  }
}
    ${SsgPostPartsFragmentDoc}`;
export const AuthorDocument = gql`
    query author($relativePath: String!) {
  author(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AuthorParts
  }
}
    ${AuthorPartsFragmentDoc}`;
export const AuthorConnectionDocument = gql`
    query authorConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AuthorFilter) {
  authorConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AuthorParts
      }
    }
  }
}
    ${AuthorPartsFragmentDoc}`;
export const DocumentationDocument = gql`
    query documentation($relativePath: String!) {
  documentation(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...DocumentationParts
  }
}
    ${DocumentationPartsFragmentDoc}`;
export const DocumentationConnectionDocument = gql`
    query documentationConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: DocumentationFilter) {
  documentationConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...DocumentationParts
      }
    }
  }
}
    ${DocumentationPartsFragmentDoc}`;
export const TagDocument = gql`
    query tag($relativePath: String!) {
  tag(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...TagParts
  }
}
    ${TagPartsFragmentDoc}`;
export const TagConnectionDocument = gql`
    query tagConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: TagFilter) {
  tagConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...TagParts
      }
    }
  }
}
    ${TagPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      DocumentQuery(variables: DocumentQueryQueryVariables, options?: C): Promise<{data: DocumentQueryQuery, variables: DocumentQueryQueryVariables, query: string}> {
        return requester<{data: DocumentQueryQuery, variables: DocumentQueryQueryVariables, query: string}, DocumentQueryQueryVariables>(DocumentQueryDocument, variables, options);
      },
    CollectionQuery(variables?: CollectionQueryQueryVariables, options?: C): Promise<{data: CollectionQueryQuery, variables: CollectionQueryQueryVariables, query: string}> {
        return requester<{data: CollectionQueryQuery, variables: CollectionQueryQueryVariables, query: string}, CollectionQueryQueryVariables>(CollectionQueryDocument, variables, options);
      },
    NodeQuery(variables: NodeQueryQueryVariables, options?: C): Promise<{data: NodeQueryQuery, variables: NodeQueryQueryVariables, query: string}> {
        return requester<{data: NodeQueryQuery, variables: NodeQueryQueryVariables, query: string}, NodeQueryQueryVariables>(NodeQueryDocument, variables, options);
      },
    MenuQuery(variables?: MenuQueryQueryVariables, options?: C): Promise<{data: MenuQueryQuery, variables: MenuQueryQueryVariables, query: string}> {
        return requester<{data: MenuQueryQuery, variables: MenuQueryQueryVariables, query: string}, MenuQueryQueryVariables>(MenuQueryDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      },
    ssgPost(variables: SsgPostQueryVariables, options?: C): Promise<{data: SsgPostQuery, variables: SsgPostQueryVariables, query: string}> {
        return requester<{data: SsgPostQuery, variables: SsgPostQueryVariables, query: string}, SsgPostQueryVariables>(SsgPostDocument, variables, options);
      },
    ssgPostConnection(variables?: SsgPostConnectionQueryVariables, options?: C): Promise<{data: SsgPostConnectionQuery, variables: SsgPostConnectionQueryVariables, query: string}> {
        return requester<{data: SsgPostConnectionQuery, variables: SsgPostConnectionQueryVariables, query: string}, SsgPostConnectionQueryVariables>(SsgPostConnectionDocument, variables, options);
      },
    author(variables: AuthorQueryVariables, options?: C): Promise<{data: AuthorQuery, variables: AuthorQueryVariables, query: string}> {
        return requester<{data: AuthorQuery, variables: AuthorQueryVariables, query: string}, AuthorQueryVariables>(AuthorDocument, variables, options);
      },
    authorConnection(variables?: AuthorConnectionQueryVariables, options?: C): Promise<{data: AuthorConnectionQuery, variables: AuthorConnectionQueryVariables, query: string}> {
        return requester<{data: AuthorConnectionQuery, variables: AuthorConnectionQueryVariables, query: string}, AuthorConnectionQueryVariables>(AuthorConnectionDocument, variables, options);
      },
    documentation(variables: DocumentationQueryVariables, options?: C): Promise<{data: DocumentationQuery, variables: DocumentationQueryVariables, query: string}> {
        return requester<{data: DocumentationQuery, variables: DocumentationQueryVariables, query: string}, DocumentationQueryVariables>(DocumentationDocument, variables, options);
      },
    documentationConnection(variables?: DocumentationConnectionQueryVariables, options?: C): Promise<{data: DocumentationConnectionQuery, variables: DocumentationConnectionQueryVariables, query: string}> {
        return requester<{data: DocumentationConnectionQuery, variables: DocumentationConnectionQueryVariables, query: string}, DocumentationConnectionQueryVariables>(DocumentationConnectionDocument, variables, options);
      },
    tag(variables: TagQueryVariables, options?: C): Promise<{data: TagQuery, variables: TagQueryVariables, query: string}> {
        return requester<{data: TagQuery, variables: TagQueryVariables, query: string}, TagQueryVariables>(TagDocument, variables, options);
      },
    tagConnection(variables?: TagConnectionQueryVariables, options?: C): Promise<{data: TagConnectionQuery, variables: TagConnectionQueryVariables, query: string}> {
        return requester<{data: TagConnectionQuery, variables: TagConnectionQueryVariables, query: string}, TagConnectionQueryVariables>(TagConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  