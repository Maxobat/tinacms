# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  ssgPost(relativePath: String): SsgPost!
  ssgPostConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SsgPostFilter): SsgPostConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorFilter): AuthorConnection!
  documentation(relativePath: String): Documentation!
  documentationConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentationFilter): DocumentationConnection!
  tag(relativePath: String): Tag!
  tagConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TagFilter): TagConnection!
}

input DocumentFilter {
  page: PageFilter
  post: PostFilter
  ssgPost: SsgPostFilter
  author: AuthorFilter
  documentation: DocumentationFilter
  tag: TagFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = PageShowcase | PageBlockPage | Post | SsgPost | Author | Documentation | Tag

type PageShowcaseItems {
  title: String!
  description: JSON
  image: String
}

type PageShowcase implements Node & Document {
  title: String!
  items: [PageShowcaseItems]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageBlockPageBlocksHeroActions {
  label: String
  url: String
  variant: String
}

type PageBlockPageBlocksHero {
  headline: String
  description: String
  actions: [PageBlockPageBlocksHeroActions]
}

type PageBlockPageBlocksFeatures {
  title: String
  imageList: [String]
  hidden: String
  booleanLabels: Boolean
  boolean: Boolean
  checkbox: [String]
  checkboxInline: [String]
  categoriesOther: [String]
  radioGroup: String
  radioGroupInline: String
  buttonToggle: String
  buttonToggleIcon: String
  buttonToggleVertical: String
  select: String
  items: [String]
}

type PageBlockPageBlocksCtaActions {
  label: String
  url: String
  variant: String
}

type PageBlockPageBlocksCta {
  title: String
  description: String
  actions: [PageBlockPageBlocksCtaActions]
}

union PageBlockPageBlocks = PageBlockPageBlocksHero | PageBlockPageBlocksFeatures | PageBlockPageBlocksCta

type PageBlockPage implements Node & Document {
  title: String!
  blocks: [PageBlockPageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Page = PageShowcase | PageBlockPage

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageShowcaseItemsFilter {
  title: StringFilter
  description: RichTextFilter
  image: ImageFilter
}

input PageShowcaseFilter {
  title: StringFilter
  items: PageShowcaseItemsFilter
}

input PageBlockPageBlocksHeroActionsFilter {
  label: StringFilter
  url: StringFilter
  variant: StringFilter
}

input PageBlockPageBlocksHeroFilter {
  headline: StringFilter
  description: StringFilter
  actions: PageBlockPageBlocksHeroActionsFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PageBlockPageBlocksFeaturesFilter {
  title: StringFilter
  imageList: ImageFilter
  hidden: StringFilter
  booleanLabels: BooleanFilter
  boolean: BooleanFilter
  checkbox: StringFilter
  checkboxInline: StringFilter
  categoriesOther: StringFilter
  radioGroup: StringFilter
  radioGroupInline: StringFilter
  buttonToggle: StringFilter
  buttonToggleIcon: StringFilter
  buttonToggleVertical: StringFilter
  select: StringFilter
  items: StringFilter
}

input PageBlockPageBlocksCtaActionsFilter {
  label: StringFilter
  url: StringFilter
  variant: StringFilter
}

input PageBlockPageBlocksCtaFilter {
  title: StringFilter
  description: StringFilter
  actions: PageBlockPageBlocksCtaActionsFilter
}

input PageBlockPageBlocksFilter {
  hero: PageBlockPageBlocksHeroFilter
  features: PageBlockPageBlocksFeaturesFilter
  cta: PageBlockPageBlocksCtaFilter
}

input PageBlockPageFilter {
  title: StringFilter
  blocks: PageBlockPageBlocksFilter
}

input PageFilter {
  showcase: PageShowcaseFilter
  blockPage: PageBlockPageFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

union PostAuthor = Author

type Post implements Node & Document {
  title: String!
  author: PostAuthor
  categories: [String]
  body: JSON
  image: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PostAuthorFilter {
  author: AuthorFilter
}

input PostBodyRimgFilter {
  src: StringFilter
  href: StringFilter
  breakout: StringFilter
  width: StringFilter
  height: StringFilter
  caption: StringFilter
  alt: StringFilter
}

input PostBodyAdPanelFilter {
  _value: StringFilter
}

input PostBodyFeaturePanelFilter {
  _value: StringFilter
}

input PostBodyPullQuoteFilter {
  foo: StringFilter
  children: RichTextFilter
}

input PostBodyHeroFilter {
  header: StringFilter
  description: RichTextFilter
  image: ImageFilter
}

input PostBodyFilter {
  rimg: PostBodyRimgFilter
  adPanel: PostBodyAdPanelFilter
  featurePanel: PostBodyFeaturePanelFilter
  pullQuote: PostBodyPullQuoteFilter
  Hero: PostBodyHeroFilter
}

input PostFilter {
  title: StringFilter
  author: PostAuthorFilter
  categories: StringFilter
  body: PostBodyFilter
  image: ImageFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type SsgPost implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SsgPostBodyRimgFilter {
  src: StringFilter
  href: StringFilter
  breakout: StringFilter
  width: StringFilter
  height: StringFilter
  caption: StringFilter
  alt: StringFilter
}

input SsgPostBodyAdPanelFilter {
  _value: StringFilter
}

input SsgPostBodyFeaturePanelFilter {
  _value: StringFilter
}

input SsgPostBodyCenterFilter {
  children: RichTextFilter
}

input SsgPostBodyPullQuoteFilter {
  foo: StringFilter
  children: RichTextFilter
}

input SsgPostBodyHeroFilter {
  header: StringFilter
  description: RichTextFilter
  image: ImageFilter
}

input SsgPostBodyFilter {
  rimg: SsgPostBodyRimgFilter
  adPanel: SsgPostBodyAdPanelFilter
  featurePanel: SsgPostBodyFeaturePanelFilter
  center: SsgPostBodyCenterFilter
  pullQuote: SsgPostBodyPullQuoteFilter
  Hero: SsgPostBodyHeroFilter
}

input SsgPostFilter {
  title: StringFilter
  body: SsgPostBodyFilter
}

type SsgPostConnectionEdges {
  cursor: String!
  node: SsgPost
}

type SsgPostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SsgPostConnectionEdges]
}

type Author implements Node & Document {
  name: String
  bio: JSON
  hobbies: [String]
  image: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorFilter {
  name: StringFilter
  bio: RichTextFilter
  hobbies: StringFilter
  image: ImageFilter
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

union DocumentationTagsReference = Tag

type DocumentationTags {
  reference: DocumentationTagsReference
}

type Documentation implements Node & Document {
  title: String!
  tags: [DocumentationTags]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DocumentationTagsReferenceFilter {
  tag: TagFilter
}

input DocumentationTagsFilter {
  reference: DocumentationTagsReferenceFilter
}

input DocumentationFilter {
  title: StringFilter
  tags: DocumentationTagsFilter
  body: RichTextFilter
}

type DocumentationConnectionEdges {
  cursor: String!
  node: Documentation
}

type DocumentationConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentationConnectionEdges]
}

type Tag implements Node & Document {
  title: String!
  description: JSON
  testing: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input TagFilter {
  title: StringFilter
  description: RichTextFilter
  testing: StringFilter
}

type TagConnectionEdges {
  cursor: String!
  node: Tag
}

type TagConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TagConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateSsgPost(relativePath: String!, params: SsgPostMutation!): SsgPost!
  createSsgPost(relativePath: String!, params: SsgPostMutation!): SsgPost!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updateDocumentation(relativePath: String!, params: DocumentationMutation!): Documentation!
  createDocumentation(relativePath: String!, params: DocumentationMutation!): Documentation!
  updateTag(relativePath: String!, params: TagMutation!): Tag!
  createTag(relativePath: String!, params: TagMutation!): Tag!
}

input DocumentUpdateMutation {
  page: PageMutation
  post: PostMutation
  ssgPost: SsgPostMutation
  author: AuthorMutation
  documentation: DocumentationMutation
  tag: TagMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  post: PostMutation
  ssgPost: SsgPostMutation
  author: AuthorMutation
  documentation: DocumentationMutation
  tag: TagMutation
}

input PageShowcaseItemsMutation {
  title: String
  description: JSON
  image: String
}

input PageShowcaseMutation {
  title: String
  items: [PageShowcaseItemsMutation]
}

input PageBlockPageBlocksHeroActionsMutation {
  label: String
  url: String
  variant: String
}

input PageBlockPageBlocksHeroMutation {
  headline: String
  description: String
  actions: [PageBlockPageBlocksHeroActionsMutation]
}

input PageBlockPageBlocksFeaturesMutation {
  title: String
  imageList: [String]
  hidden: String
  booleanLabels: Boolean
  boolean: Boolean
  checkbox: [String]
  checkboxInline: [String]
  categoriesOther: [String]
  radioGroup: String
  radioGroupInline: String
  buttonToggle: String
  buttonToggleIcon: String
  buttonToggleVertical: String
  select: String
  items: [String]
}

input PageBlockPageBlocksCtaActionsMutation {
  label: String
  url: String
  variant: String
}

input PageBlockPageBlocksCtaMutation {
  title: String
  description: String
  actions: [PageBlockPageBlocksCtaActionsMutation]
}

input PageBlockPageBlocksMutation {
  hero: PageBlockPageBlocksHeroMutation
  features: PageBlockPageBlocksFeaturesMutation
  cta: PageBlockPageBlocksCtaMutation
}

input PageBlockPageMutation {
  title: String
  blocks: [PageBlockPageBlocksMutation]
}

input PageMutation {
  showcase: PageShowcaseMutation
  blockPage: PageBlockPageMutation
}

input PostMutation {
  title: String
  author: String
  categories: [String]
  body: JSON
  image: String
}

input SsgPostMutation {
  title: String
  body: JSON
}

input AuthorMutation {
  name: String
  bio: JSON
  hobbies: [String]
  image: String
}

input DocumentationTagsMutation {
  reference: String
}

input DocumentationMutation {
  title: String
  tags: [DocumentationTagsMutation]
  body: JSON
}

input TagMutation {
  title: String
  description: JSON
  testing: String
}

schema {
  query: Query
  mutation: Mutation
}
